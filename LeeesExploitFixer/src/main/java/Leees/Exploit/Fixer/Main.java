package Leees.Exploit.Fixer;

import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import com.lmax.disruptor.util.Util;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

public class Main extends JavaPlugin implements Listener {
    public static String[] idArray = new String[]{"7", "166", "52", "137", "119", "383"};
    public static String[] ubArray = new String[]{"310", "311", "312", "313", "276", "277", "278", "279", "293", "259", "261", "443"};
    public static List blockedids;
    public static File mutedfile;
    public static List allowedUBs;
    FileConfiguration config = this.getConfig();
    public ScheduledExecutorService service = Executors.newScheduledThreadPool(4);
    public static Map<String, Integer> violationMap;

    static {
        blockedids = Arrays.asList(idArray);
        allowedUBs = Arrays.asList(ubArray);
        violationMap = new ConcurrentHashMap();
    }

    public static Main getPlugin() {
        return getPlugin(Main.class);
    }

    public void onEnable() {
        this.saveDefaultConfig();
        File dir = new File("plugins/LeeesExploitFixer");
        if (!dir.exists()) {
            dir.mkdirs();
        }
        (new Thread(() -> {
        mutedfile = new File(dir, "muted.txt");
        if (!mutedfile.exists()) {
            try {
                mutedfile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                this.getServer().getPluginManager().disablePlugin(this);
                return;
            }
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(mutedfile));
            br.lines().forEach(uuid2 ->
                    NotMuted.muted.add(uuid2));
        } catch (IOException x) {
            x.printStackTrace();
            getServer().getPluginManager().disablePlugin(this);
            return;
        }
    })).start();
        this.config.addDefault("IllegalBlock-Place.Bedrock", "&6That block is not allowed");
        this.config.addDefault("IllegalBlock-Place.Barrier", "&6That block is not allowed");
        this.config.addDefault("IllegalBlock-Place.End_Portal_Frame", "&6That block is not allowed");
        this.config.addDefault("IllegalBlock-Place.Mob_Spawner", "&6That block is not allowed");
        this.config.addDefault("ChunkBan.Prevent-Message", "&6ChunkBan has been disabled due to an exploit (^:");
        this.config.addDefault("ChunkBan.Skull-Max", 60);
        this.config.addDefault("ChunkBan.TileEntity-Max", 256);
        this.config.addDefault("Nether.Top-Layer", 127);
        this.config.addDefault("Nether.Top-message", "&6The nether top has been disabled due to lag");
        this.config.addDefault("Nether.Bottom-Layer", 0);
        this.config.addDefault("Nether.Bottom-message", "&6The nether bottom has been disabled due to lag");
        this.config.addDefault("Nether.top/bottom-do-damage", true);
        this.config.addDefault("Spawn.Raidus", 500);
        this.config.addDefault("Offhand-Server-Crash.Shulker-messager", "&clel");
        this.config.addDefault("Offhand-Server-Crash.Book-message", "&clel");
        this.config.options().copyDefaults(true);
        this.saveConfig();
        this.getLogger().info("LeeesExploitFixer enabled");
        this.getServer().getPluginManager().registerEvents(new BlockPlace(), this);
        this.getServer().getPluginManager().registerEvents(new Offhand(), this);
        this.getServer().getPluginManager().registerEvents(new GateWay(), this);
        this.getServer().getPluginManager().registerEvents(new HandSwapEvent(), this);
        this.getServer().getPluginManager().registerEvents(new BookBan(), this);
        this.getServer().getPluginManager().registerEvents(new ChinkBan(), this);
        this.getServer().getPluginManager().registerEvents(new MoveEvent(), this);
        this.getServer().getPluginManager().registerEvents(new HopperTransfer(), this);
        this.getServer().getPluginManager().registerEvents(new InventoryOpen(), this);
        this.getServer().getPluginManager().registerEvents(new InventoryClose(), this);
        this.getServer().getPluginManager().registerEvents(new ItemPickup(), this);
        this.getServer().getPluginManager().registerEvents(new PlaceEvent(), this);
        this.getServer().getPluginManager().registerEvents(new CommandEvent(), this);
        this.getServer().getPluginManager().registerEvents(new LagMachinePatches(), this);
        this.getServer().getPluginManager().registerEvents(new PlayerChat(), this);
        this.getServer().getPluginManager().registerEvents(new TeleportEvent(), this);
        this.getServer().getPluginManager().registerEvents(new MinecartLag(), this);
        this.getServer().getPluginManager().registerEvents(new LightLagFix(), this);
        this.getCommand("speed").setExecutor(new FlySpeed());
        this.getCommand("lefreload").setExecutor(new Rconfig());
        this.getCommand("mute").setExecutor(new NotMuted());
        this.violationMap.clear();
        this.service.scheduleAtFixedRate(() -> {
            for (Map.Entry<String, Integer> violationEntry : this.violationMap.entrySet()) {
                if (violationEntry.getValue().intValue() > 0)
                    violationEntry.setValue(Integer.valueOf(violationEntry.getValue()).intValue() - 1);
            }
        }, 1L, 1L, TimeUnit.MINUTES);
    }
    public void onDisable() {
        this.getLogger().info("LeeesExploitFixer disabled");
        Utils.deleteFortressDat("0b0t");
    }
    public static void save() {
        try {
            BufferedWriter br = new BufferedWriter(new FileWriter(mutedfile));
            NotMuted.muted.forEach(s -> {
                try {
                    br.append(s);
                    br.newLine();
                    br.flush();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
